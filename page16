package com.example.demo11;

import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import com.intellij.ui.components.JBTextField;

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;

public class ChatPanel extends JPanel {

    private final StyledDocument styledDocument;
    private final JTextPane responseArea;
    private boolean buttonsVisible = false;
    private final JPanel buttonContainer;

    public ChatPanel(Project project) {
        setLayout(new BorderLayout());

        // === Response Area with Styles ===
        responseArea = new JTextPane();
        responseArea.setEditable(false);
        responseArea.setFont(new Font("Poppins", Font.PLAIN, 14));
        styledDocument = responseArea.getStyledDocument();

        JScrollPane scrollPane = new JScrollPane(responseArea);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        add(scrollPane, BorderLayout.CENTER);

        // === Header ===
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setPreferredSize(new Dimension(0, 30));
        headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));

        String[] modes = {"Simple", "Professional"};
        JComboBox<String> modeDropdown = new JComboBox<>(modes);
        modeDropdown.setSelectedItem("Professional");
        modeDropdown.setPreferredSize(new Dimension(150, 25));
        modeDropdown.setFont(new Font("Poppins", Font.PLAIN, 12));
        modeDropdown.setFocusable(false);
        headerPanel.add(modeDropdown, BorderLayout.WEST);

        JPanel iconsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 8, 2));
        iconsPanel.setOpaque(false);
        JLabel copyLabel1 = createIconLabel("/icons/copy.png", "Clear", project);
        JLabel copyLabel2 = createIconLabel("/icons/copy.png", "Toggle Options", project);
        JLabel refreshLabel = createIconLabel("/icons/copy.png", "Refresh", project);
        iconsPanel.add(copyLabel1);
        iconsPanel.add(copyLabel2);
        iconsPanel.add(refreshLabel);
        headerPanel.add(iconsPanel, BorderLayout.EAST);
        add(headerPanel, BorderLayout.NORTH);

        // === Button Container ===
        buttonContainer = new JPanel();
        buttonContainer.setLayout(new BoxLayout(buttonContainer, BoxLayout.Y_AXIS));
        buttonContainer.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        buttonContainer.setVisible(false);

        buttonContainer.add(createCenteredRow("Add Test", "Debugging"));
        buttonContainer.add(createCenteredRow("Refactor", "Code Review"));
        buttonContainer.add(createCenteredRow("Documentation"));

        // === Footer ===
        JPanel footerPanel = new JPanel(new BorderLayout(10, 0));
        footerPanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

        JBTextField inputField = new JBTextField();
        JButton sendButton = new JButton("Send");

        int inputHeight = 40;
        inputField.setPreferredSize(new Dimension(0, inputHeight));
        sendButton.setPreferredSize(new Dimension(100, inputHeight));
        sendButton.setFont(new Font("Poppins", Font.BOLD, 14));

        footerPanel.add(inputField, BorderLayout.CENTER);
        footerPanel.add(sendButton, BorderLayout.EAST);
        footerPanel.setPreferredSize(new Dimension(0, inputHeight + 10));

        JPanel bottomWrapper = new JPanel();
        bottomWrapper.setLayout(new BoxLayout(bottomWrapper, BoxLayout.Y_AXIS));
        bottomWrapper.add(buttonContainer);
        bottomWrapper.add(footerPanel);

        add(bottomWrapper, BorderLayout.SOUTH);

        // === Actions ===
        sendButton.addActionListener(e -> {
            String userInput = inputField.getText().trim();
            if (!userInput.isEmpty()) {
                inputField.setText("");
                simulateStreamingResponse(userInput);
            } else {
                Messages.showInfoMessage(project, "Please enter a query.", "Input Required");
            }
        });

        copyLabel2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                buttonsVisible = !buttonsVisible;
                buttonContainer.setVisible(buttonsVisible);
                revalidate();
                repaint();
            }
        });

        copyLabel1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                responseArea.setText("");
            }
        });
    }

    private JLabel createIconLabel(String iconPath, String tooltip, Project project) {
        URL resource = getClass().getResource(iconPath);
        ImageIcon icon = resource != null ? new ImageIcon(resource) : new ImageIcon();
        JLabel label = new JLabel(icon);
        label.setToolTipText(tooltip);
        label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        return label;
    }

    private JPanel createCenteredRow(String... buttonNames) {
        JPanel row = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 5));
        for (String name : buttonNames) {
            JButton button = new JButton(name);
            button.setPreferredSize(new Dimension(140, 38));
            button.setFont(new Font("Poppins", Font.PLAIN, 13));
            button.addActionListener(e -> handleButtonClick(name));
            row.add(button);
        }
        return row;
    }

    private void handleButtonClick(String name) {
        System.out.println(name + " button clicked!");
        // Add logic for each button if needed
    }

    private void simulateStreamingResponse(String userInput) {
        new Thread(() -> {
            try {
                String[] lines = {
                        "# AI Response",
                        "Here is a code snippet:",
                        "```java",
                        "public class HelloWorld {",
                        "    public static void main(String[] args) {",
                        "        System.out.println(\"Hello, world!\");",
                        "    }",
                        "}",
                        "```",
                        "Here is a Python code snippet:",
                        "```java",
                        "public class HelloWorldPython {",
                        "    public static void main(String[] args) {",
                        "        System.out.println(\"Hello, world! Python\");",
                        "    }",
                        "}",
                        "```",
                };

                appendStyledText("User: " + userInput + "\n\n", false);

                boolean insideCodeBlock = false;
                StringBuilder codeBuffer = new StringBuilder();

                for (String line : lines) {
                    Thread.sleep(400);

                    if (line.startsWith("```")) {
                        if (insideCodeBlock) {
                            // Closing block, render code
                            String codeContent = codeBuffer.toString();
                            SwingUtilities.invokeLater(() -> appendStyledText(codeContent + "\n", true));
                            codeBuffer.setLength(0);
                            insideCodeBlock = false;
                        } else {
                            insideCodeBlock = true;
                        }
                    } else if (insideCodeBlock) {
                        codeBuffer.append(line).append("\n");
                    } else {
                        SwingUtilities.invokeLater(() -> appendStyledText(line + "\n", false));
                    }
                }
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    private void appendStyledText(String text, boolean isCodeBlock) {
        if (isCodeBlock) {
            JPanel codeBlockPanel = createCodeBlockPanel(text);
            Style style = styledDocument.addStyle("codeStyle", null);
            StyleConstants.setComponent(style, codeBlockPanel);
            try {
                styledDocument.insertString(styledDocument.getLength(), "ignored", style);
                styledDocument.insertString(styledDocument.getLength(), "\n", null); // for spacing
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            responseArea.setCaretPosition(styledDocument.getLength());
        } else {
            try {
                SimpleAttributeSet attr = new SimpleAttributeSet();
                StyleConstants.setFontFamily(attr, "Poppins");
                StyleConstants.setFontSize(attr, 14);
                StyleConstants.setForeground(attr, Color.BLACK);
                StyleConstants.setBackground(attr, Color.WHITE);
                styledDocument.insertString(styledDocument.getLength(), text, attr);
                responseArea.setCaretPosition(styledDocument.getLength());
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    }

    private JPanel createCodeBlockPanel(String codeContent) {
        JPanel codePanel = new JPanel(new BorderLayout());
        JTextArea codeArea = new JTextArea(codeContent);
        codeArea.setEditable(false);
        codeArea.setFont(new Font("Consolas", Font.PLAIN, 14));
        codeArea.setBackground(new Color(40, 44, 52));
        codeArea.setForeground(Color.WHITE);
        codeArea.setCaretPosition(0);

        // Ensure scrolling works by setting the JTextArea as scrollable
        JScrollPane codeScroll = new JScrollPane(codeArea);
        codePanel.add(codeScroll, BorderLayout.CENTER);

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        JLabel copyIcon = new JLabel(new ImageIcon(getClass().getResource("/icons/copy.png")));
        JLabel insertIcon = new JLabel(new ImageIcon(getClass().getResource("/icons/copy.png"))); // Add an Insert icon

        copyIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        insertIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        copyIcon.setToolTipText("Copy Code");
        insertIcon.setToolTipText("Insert Code into Editor");

        // Handle insert icon click event
        insertIcon.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
//                insertCodeIntoActiveEditor(codeContent);
            }
        });

        // Handle copy icon click event
        copyIcon.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                StringSelection stringSelection = new StringSelection(codeContent);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(stringSelection, null);
            }
        });

        topPanel.add(copyIcon);
        topPanel.add(insertIcon);

        codePanel.add(topPanel, BorderLayout.NORTH);

        return codePanel;
    }

//    private void insertCodeIntoActiveEditor(String codeContent) {
//        Editor editor = getActiveEditor();
//        if (editor != null) {
//            int caretPosition = editor.getCaretModel().getOffset();
//            editor.getDocument().insertString(caretPosition, codeContent);
//        } else {
//            Messages.showErrorDialog("No active editor found!", "Error");
//        }
//    }
//
//    private Editor getActiveEditor() {
//        return EditorFactory.getInstance().getEditors()[0]; // Get the first editor for simplicity
//    }
}


















private void simulateStreamingResponse(String userInput) {
    String token = "Bearer YOUR_AUTH_TOKEN"; // 🔐 Replace with your real token
    String apiUrl = "https://your-api-endpoint.com/stream"; // ✅ Replace with your actual endpoint

    String jsonBody = new JSONObject()
            .put("prompt", userInput)
            .put("category_type", "1")
            .put("session_id", "1")
            .put("mld_name", "1")
            .toString();

    OkHttpClient client = new OkHttpClient();

    RequestBody body = RequestBody.create(jsonBody, MediaType.parse("application/json"));

    Request request = new Request.Builder()
            .url(apiUrl)
            .header("Authorization", token)
            .post(body)
            .build();

    // Append user's message
    appendStyledText("User: " + userInput + "\n\n", false);

    client.newCall(request).enqueue(new Callback() {
        @Override
        public void onFailure(Call call, IOException e) {
            e.printStackTrace();
            SwingUtilities.invokeLater(() -> appendStyledText("Error: " + e.getMessage() + "\n", false));
        }

        @Override
        public void onResponse(Call call, Response response) {
            if (!response.isSuccessful()) {
                SwingUtilities.invokeLater(() ->
                        appendStyledText("Unsuccessful response: " + response.message() + "\n", false)
                );
                return;
            }

            boolean inCodeBlock = false;
            StringBuilder codeBuilder = new StringBuilder();

            try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.body().byteStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String finalLine = line;

                    if (finalLine.trim().startsWith("```")) {
                        if (inCodeBlock) {
                            // Closing code block
                            String codeContent = codeBuilder.toString();
                            SwingUtilities.invokeLater(() -> appendStyledText(codeContent + "\n", true));
                            codeBuilder.setLength(0);
                            inCodeBlock = false;
                        } else {
                            inCodeBlock = true;
                        }
                        continue;
                    }

                    if (inCodeBlock) {
                        codeBuilder.append(finalLine).append("\n");
                    } else {
                        SwingUtilities.invokeLater(() -> appendStyledText(finalLine + "\n", false));
                    }

                    Thread.sleep(100); // Optional delay for effect
                }
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        }
    });
}
