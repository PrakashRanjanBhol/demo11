package com.example.demo11;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.ui.components.JBTextField;
import com.intellij.ui.content.Content;
import com.intellij.ui.content.ContentFactory;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;

public class SidepanelFactory implements ToolWindowFactory {

    @Override
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Header (5%)
        JPanel headerPanel = new JPanel();
        headerPanel.setPreferredSize(new Dimension(0, 30));
        headerPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel titleLabel = new JLabel("AI Assistant");
        titleLabel.setFont(new Font("Poppins", Font.BOLD, 16));
        titleLabel.setForeground(Color.WHITE);
        headerPanel.add(titleLabel);

        // Center (90%) - Response pane
        JTextPane responsePane = new JTextPane();
        responsePane.setContentType("text/html");
        responsePane.setEditable(false);
        responsePane.setText("<html><body style='font-family:\"Poppins\", \"Lato\", sans-serif; color:#dddddd; padding:8px;'></body></html>");
        responsePane.setCaretPosition(0);
        responsePane.setOpaque(false);
        responsePane.setPreferredSize(null);

        JScrollPane scrollPane = new JScrollPane(responsePane);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        // Footer (5%) - Input field and send button
        JBTextField inputField = new JBTextField();
        inputField.setFont(new Font("Poppins", Font.PLAIN, 14));
        inputField.setPreferredSize(new Dimension(0, 40));
        inputField.setMargin(new Insets(8, 8, 8, 8));

        JButton sendButton = new JButton("Send");
        sendButton.setFont(new Font("Poppins", Font.BOLD, 14));
        sendButton.setPreferredSize(new Dimension(80, 40));

        JPanel footerPanel = new JPanel(new BorderLayout(5, 0));
        footerPanel.setPreferredSize(new Dimension(0, 50));
        footerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        footerPanel.add(inputField, BorderLayout.CENTER);
        footerPanel.add(sendButton, BorderLayout.EAST);

        // Assemble the layout
        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(centerPanel, BorderLayout.CENTER);
        mainPanel.add(footerPanel, BorderLayout.SOUTH);

        // Add content to tool window
        ContentFactory contentFactory = ContentFactory.getInstance();
        Content content = contentFactory.createContent(mainPanel, "", false);
        toolWindow.getContentManager().addContent(content);

        // Button action
        sendButton.addActionListener(e -> {
            String userInput = inputField.getText().trim();
            if (!userInput.isEmpty()) {
                inputField.setText("");
                simulateStreamingResponse(userInput, responsePane);
            } else {
                Messages.showInfoMessage(project, "Please enter a query.", "Input Required");
            }
        });
    }

    private void simulateStreamingResponse(String userInput, JTextPane responsePane) {
        new Thread(() -> {
            try {
                String[] simulatedLines = {
                        "# AI Response",
                        "Here is an example of **Java code** you asked for:",
                        "```java",
                        "public class HelloWorld {",
                        "    public static void main(String[] args) {",
                        "        System.out.println(\"Hello, world!\");",
                        "    }",
                        "}",
                        "```",
                        "Let me know if you want *Python* or *JavaScript* versions.",
                        "- Easy to use",
                        "- Fast and clean",
                        "## Thanks!"
                };

                boolean inCodeBlock = false;

                String currentText = responsePane.getText();
                if (currentText.startsWith("<html>") && currentText.contains("<body")) {
                    int bodyStart = currentText.indexOf("<body");
                    int bodyEnd = currentText.indexOf(">", bodyStart);
                    int endIndex = currentText.lastIndexOf("</body>");
                    if (bodyStart != -1 && bodyEnd != -1 && endIndex != -1) {
                        currentText = currentText.substring(bodyEnd + 1, endIndex);
                    }
                }

                StringBuilder newHtml = new StringBuilder();
                newHtml.append(
                        "<div style='background:#1f2937;border:1px solid #3b82f6;border-radius:8px;padding:10px;margin-bottom:12px;font-family:\"Poppins\", \"Lato\", sans-serif;'>" +
                                "<div style='color:#60a5fa;font-weight:bold;margin-bottom:4px;'>User</div>" +
                                "<div style='color:#d4d4d4;'>" + userInput + "</div>" +
                                "</div>"
                );

                newHtml.append(
                        "<div style='background:#2c2c2c;border:1px solid #3c3c3c;border-radius:8px;padding:12px;margin-bottom:12px;font-family:\"Poppins\", \"Lato\", sans-serif;'>" +
                                "<div style='color:#98c379;font-weight:bold;margin-bottom:6px;'>AI</div>" +
                                "<div style='color:#d4d4d4;'>"
                );

                for (String line : simulatedLines) {
                    Thread.sleep(400);

                    if (line.startsWith("```")) {
                        inCodeBlock = !inCodeBlock;
                        if (inCodeBlock) {
                            newHtml.append("<div style='background:#1e1e1e;border:1px solid #333;border-radius:6px;padding:10px;font-family:\"JetBrains Mono\", Consolas, \"Fira Code\", monospace;white-space:pre;color:#d4d4d4;margin:6px 0;'>");
                        } else {
                            newHtml.append("</div>");
                        }
                    } else {
                        if (inCodeBlock) {
                            newHtml.append(applyJavaHighlighting(line)).append("<br/>");
                        } else {
                            newHtml.append(applyMarkdown(line));
                        }
                    }

                    String fullHtml =
                            "<html><body style='font-family:\"Poppins\", \"Lato\", sans-serif;padding:8px;background:#1e1e1e; color:#d4d4d4;'>" +
                                    currentText + newHtml +
                                    "</div></div></body></html>";

                    SwingUtilities.invokeLater(() -> {
                        responsePane.setText(fullHtml);
                        responsePane.setCaretPosition(responsePane.getDocument().getLength());
                    });
                }
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    private String applyJavaHighlighting(String line) {
        String[] keywords = {
                "public", "class", "static", "void", "new", "int", "String", "if", "else", "return"
        };

        line = line.replace("<", "&lt;").replace(">", "&gt;");
        line = line.replaceAll("\"(.*?)\"", "<span style='color:#d69d85'>\"$1\"</span>");

        for (String keyword : keywords) {
            line = line.replaceAll("\\b" + keyword + "\\b",
                    "<span style='color:#569CD6;font-weight:bold;'>" + keyword + "</span>");
        }

        if (line.trim().startsWith("//")) {
            line = "<span style='color:#6A9955;'>" + line + "</span>";
        }

        return line;
    }

    private String applyMarkdown(String line) {
        line = line.replace("<", "&lt;").replace(">", "&gt;");

        if (line.startsWith("###")) {
            return "<h3 style='margin:4px 0;'>" + line.substring(3).trim() + "</h3>";
        } else if (line.startsWith("##")) {
            return "<h2 style='margin:6px 0;'>" + line.substring(2).trim() + "</h2>";
        } else if (line.startsWith("#")) {
            return "<h1 style='margin:8px 0;'>" + line.substring(1).trim() + "</h1>";
        }

        if (line.trim().startsWith("- ")) {
            return "<ul style='margin:4px 0;'><li>" + line.trim().substring(2) + "</li></ul>";
        }

        line = line.replaceAll("\\*\\*(.*?)\\*\\*", "<strong>$1</strong>");
        line = line.replaceAll("\\*(.*?)\\*", "<em>$1</em>");

        return "<div style='margin:2px 0;'>" + line + "</div>";
    }
}










private void fetchStreamingResponse(String userInput, JTextPane responsePane) {
    new Thread(() -> {
        try {
            String token = "Bearer YOUR_AUTH_TOKEN"; // 🔐 Replace with real token
            String endpoint = "https://your-api-endpoint.com/stream"; // 🔗 Replace with real endpoint

            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Content-Type", "application/json")
                    .header("Authorization", token)
                    .POST(HttpRequest.BodyPublishers.ofString("{\"query\": \"" + userInput + "\"}"))
                    .build();

            client.sendAsync(request, HttpResponse.BodyHandlers.ofLines())
                    .thenAccept(response -> {
                        StringBuilder html = new StringBuilder();
                        html.append("<html><body style='font-family:\"Poppins\", \"Lato\", sans-serif; background:#1e1e1e; color:#d4d4d4; padding:8px;'>");
                        html.append("<div style='background:#1f2937;border:1px solid #3b82f6;border-radius:8px;padding:10px;margin-bottom:12px;'>")
                            .append("<div style='color:#60a5fa;font-weight:bold;margin-bottom:4px;'>User</div>")
                            .append("<div>").append(userInput).append("</div></div>");

                        html.append("<div style='background:#2c2c2c;border:1px solid #3c3c3c;border-radius:8px;padding:12px;margin-bottom:12px;'>")
                            .append("<div style='color:#98c379;font-weight:bold;margin-bottom:6px;'>AI</div>")
                            .append("<div style='color:#d4d4d4;'>");

                        boolean[] inCodeBlock = {false};

                        response.body().forEach(line -> {
                            if (line.trim().startsWith("```")) {
                                inCodeBlock[0] = !inCodeBlock[0];
                                if (inCodeBlock[0]) {
                                    html.append("<div style='background:#1e1e1e;border:1px solid #333;border-radius:6px;padding:10px;font-family:\"JetBrains Mono\", Consolas, \"Fira Code\", monospace;white-space:pre;margin:6px 0;'>");
                                } else {
                                    html.append("</div>");
                                }
                            } else {
                                if (inCodeBlock[0]) {
                                    html.append(applyJavaHighlighting(line)).append("<br/>");
                                } else {
                                    html.append(applyMarkdown(line));
                                }
                            }

                            String fullHtml = html.toString() + "</div></div></body></html>";

                            SwingUtilities.invokeLater(() -> {
                                responsePane.setText(fullHtml);
                                responsePane.setCaretPosition(responsePane.getDocument().getLength());
                            });
                        });
                    }).exceptionally(ex -> {
                        ex.printStackTrace();
                        return null;
                    });

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }).start();
}
