package com.example.demo11;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.ui.components.JBTextField;
import com.intellij.ui.content.Content;
import com.intellij.ui.content.ContentFactory;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;

public class SidepanelFactory implements ToolWindowFactory {

    @Override
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Header (5%)
        JPanel headerPanel = new JPanel();
        headerPanel.setPreferredSize(new Dimension(0, 30));
        headerPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel titleLabel = new JLabel("AI Assistant");
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 14));
        headerPanel.add(titleLabel);

        // Center (90%) - Response pane
        JTextPane responsePane = new JTextPane();
        responsePane.setContentType("text/html");
        responsePane.setEditable(false);
        responsePane.setText("<html><body style='font-family:sans-serif;'></body></html>");

        JScrollPane scrollPane = new JScrollPane(responsePane);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        // Footer (5%) - Input field and send button
        JBTextField inputField = new JBTextField();
        inputField.setFont(new Font("SansSerif", Font.PLAIN, 14));
        inputField.setPreferredSize(new Dimension(0, 40));
        inputField.setMargin(new Insets(8, 8, 8, 8));

        JButton sendButton = new JButton("Send");
        sendButton.setFont(new Font("SansSerif", Font.BOLD, 14));
        sendButton.setPreferredSize(new Dimension(80, 40));

        JPanel footerPanel = new JPanel(new BorderLayout(5, 0));
        footerPanel.setPreferredSize(new Dimension(0, 50));
        footerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        footerPanel.add(inputField, BorderLayout.CENTER);
        footerPanel.add(sendButton, BorderLayout.EAST);

        // Assemble the layout
        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(centerPanel, BorderLayout.CENTER);
        mainPanel.add(footerPanel, BorderLayout.SOUTH);

        // Add content to tool window
        ContentFactory contentFactory = ContentFactory.getInstance();
        Content content = contentFactory.createContent(mainPanel, "", false);
        toolWindow.getContentManager().addContent(content);

        // Button action
        sendButton.addActionListener(e -> {
            String userInput = inputField.getText().trim();
            if (!userInput.isEmpty()) {
                inputField.setText("");
                simulateStreamingResponse(userInput, responsePane);
            } else {
                Messages.showInfoMessage(project, "Please enter a query.", "Input Required");
            }
        });
    }



    private void simulateStreamingResponse(String userInput, JTextPane responsePane) {
        new Thread(() -> {
            try {
                String[] simulatedLines = {
                        "# AI Response",
                        "Here is an example of **Java code** you asked for:",
                        "```java",
                        "public class HelloWorld {",
                        "    public static void main(String[] args) {",
                        "        System.out.println(\"Hello, world!\");",
                        "    }",
                        "}",
                        "```",
                        "Let me know if you want *Python* or *JavaScript* versions.",
                        "- Easy to use",
                        "- Fast and clean",
                        "## Thanks!"
                };

                StringBuilder html = new StringBuilder("<html><body style='font-family:sans-serif;'>");
                boolean inCodeBlock = false;

                html.append("<div style='margin-bottom:10px;'><b>User:</b> ").append(userInput).append("</div>");

                for (String line : simulatedLines) {
                    Thread.sleep(400); // Simulate streaming delay

                    if (line.startsWith("```")) {
                        inCodeBlock = !inCodeBlock;
                        if (inCodeBlock) {
                            html.append("<div style='background:#2d2d2d;border:1px solid #444;"
                                    + "padding:8px;margin:6px 0;font-family:monospace;"
                                    + "white-space:pre;color:#d4d4d4;border-radius:6px;'>");
                        } else {
                            html.append("</div>");
                        }
                    } else {
                        if (inCodeBlock) {
                            html.append(applyJavaHighlighting(line)).append("<br/>");
                        } else {
                            html.append(applyMarkdown(line));
                        }
                    }

                    String finalHtml = html.toString() + "</body></html>";
                    SwingUtilities.invokeLater(() -> {
                        responsePane.setText(finalHtml);
                        responsePane.setCaretPosition(responsePane.getDocument().getLength());
                    });
                }
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    private String applyJavaHighlighting(String line) {
        String[] keywords = {
                "public", "class", "static", "void", "new", "int", "String", "if", "else", "return"
        };

        // Escape HTML
        line = line.replace("<", "&lt;").replace(">", "&gt;");

        // Highlight strings
        line = line.replaceAll("\"(.*?)\"", "<span style='color:#d69d85'>\"$1\"</span>");

        // Highlight keywords
        for (String keyword : keywords) {
            line = line.replaceAll("\\b" + keyword + "\\b",
                    "<span style='color:#569CD6;font-weight:bold;'>" + keyword + "</span>");
        }

        // Highlight comments
        if (line.trim().startsWith("//")) {
            line = "<span style='color:#6A9955;'>" + line + "</span>";
        }

        return line;
    }


    private String applyMarkdown(String line) {
        line = line.replace("<", "&lt;").replace(">", "&gt;");

        // Headings
        if (line.startsWith("###")) {
            return "<h3 style='margin:4px 0;'>" + line.substring(3).trim() + "</h3>";
        } else if (line.startsWith("##")) {
            return "<h2 style='margin:6px 0;'>" + line.substring(2).trim() + "</h2>";
        } else if (line.startsWith("#")) {
            return "<h1 style='margin:8px 0;'>" + line.substring(1).trim() + "</h1>";
        }

        // Bullet lists
        if (line.trim().startsWith("- ")) {
            return "<ul style='margin:4px 0;'><li>" + line.trim().substring(2) + "</li></ul>";
        }

        // Bold
        line = line.replaceAll("\\*\\*(.*?)\\*\\*", "<strong>$1</strong>");

        // Italic
        line = line.replaceAll("\\*(.*?)\\*", "<em>$1</em>");

        return "<div style='margin:2px 0;'>" + line + "</div>";
    }
}






StringBuilder html = new StringBuilder(
    "<html><body style='font-family:\"Poppins\", \"Lato\", sans-serif;"
    + "color:#dcdcdc;background-color:#1e1e1e;margin:0;padding:10px;'>"
);


html.append("<div style='background:#2d2d2d;border:1px solid #444;"
                                    + "padding:8px;margin:6px 0;font-family:\"JetBrains Mono\", Consolas, \"Fira Code\", monospace;"
                                    + "white-space:pre;color:#d4d4d4;border-radius:6px;'>");
